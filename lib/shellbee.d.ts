// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../atma-utils
//   ../child_process

declare module 'shellbee' {
    export { Shell } from 'shellbee/Shell';
}

declare module 'shellbee/Shell' {
    import { class_EventEmitter } from 'atma-utils';
    import * as child_process from 'child_process';
    import { IShellParams } from 'shellbee/interface/IProcessParams';
    import { ICommandOptions } from 'shellbee/interface/ICommandOptions';
    export type ProcessEventType = 'process_start' | 'process_exception' | 'process_exit' | 'process_ready' | 'process_stdout' | 'process_stderr';
    export class Shell extends class_EventEmitter {
        children: child_process.ChildProcessWithoutNullStreams[];
        errors: {
            command: string;
            error: Error;
        }[];
        lastCode: number;
        silent: boolean;
        parallel: boolean;
        commands: ICommandOptions[];
        results: ProcessResult[];
        extracted: {};
        state: number;
        promise: Promise<Shell>;
        std: string[];
        stderr: string[];
        stdout: string[];
        start: Date;
        end: Date;
        busy: boolean;
        constructor(params: IShellParams);
        static run(params: IShellParams): Promise<Shell>;
        run(): Promise<Shell>;
        onStart(cb: (data: {
            command: string;
        }) => void): this;
        onStdout(cb: (data: {
            command: string;
            buffer: string;
        }) => void): this;
        onStderr(cb: (data: {
            command: string;
            buffer: string;
        }) => void): this;
        onExit(cb: (data: {
            command: string;
            code: number;
            result: ProcessResult;
        }) => void): this;
        /** When rgxReady is specified the event will be called */
        onReady(cb: ({ command: string }: {
            command: any;
        }) => void): this;
        onComplete(cb: (shell: Shell) => void): this;
        kill(): Promise<unknown>;
    }
    export class ProcessResult {
        options: ICommandOptions;
        std: string[];
        stdout: string[];
        stderr: string[];
        resultCode: number;
        error: Error;
        constructor(options: ICommandOptions);
    }
}

declare module 'shellbee/interface/IProcessParams' {
    export interface IShellParams {
        command?: string | IProcessSingleParams;
        commands?: (string | IProcessSingleParams)[];
        detached?: boolean;
        cwd?: string;
        matchReady?: RegExp;
        silent?: boolean;
        parallel?: boolean;
    }
    export interface IProcessSingleParams {
        command: string;
        cwd?: string;
        detached?: boolean;
        matchReady?: RegExp;
        extract: {
            [key: string]: (output: string) => any;
        };
    }
}

declare module 'shellbee/interface/ICommandOptions' {
    import { IValueExtractors } from 'shellbee/interface/IValueExtractors';
    export interface ICommandOptions {
        exec: string;
        args: string[];
        cwd: string;
        detached: boolean;
        command: string;
        matchReady: RegExp;
        extract: IValueExtractors;
    }
}

declare module 'shellbee/interface/IValueExtractors' {
    export interface IValueExtractor<T = any> {
        (str: string): T;
    }
    export interface IValueExtractors {
        [key: string]: IValueExtractor;
    }
}

